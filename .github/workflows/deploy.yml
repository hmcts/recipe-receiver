name: Deploy to AKS sds-dev-01
on: pull_request

env:
  # Common vars
  GITHUB_EVENT_NUMBER: ${{ github.event.number }}
  APP_NAME: recipe-receiver
  QUEUE_NAME: recipes-pr${{ github.event.number }}
  HELM_VERSION: v3.9.0

  # SDS vars
  SDS_SUBSCRIPTION: 74dacd4f-a248-45bb-a2f0-af700dc4cf68
  SDS_PRODUCT: toffee
  SDS_REGISTRY_NAME: sdshmctspublic
  SDS_REGISTRY_SUB: 5ca62022-6aa2-4cee-aaa7-e7536c8d566c
  SDS_CLUSTER_NAME: ss-dev-01-aks
  SDS_CLUSTER_RESOURCE_GROUP: ss-dev-01-rg
  SDS_KUBE_NAMESPACE: toffee
  SDS_SERVICE_BUS: toffee-servicebus-stg
  SDS_SB_RESOURCE_GROUP: toffee-shared-infrastructure-stg
  SDS_LOCK_NAME: stg-lock

  # CFT vars
  CFT_SUBSCRIPTION: 8b6ea922-0862-443e-af15-6056e1c9b9a4
  CFT_PRODUCT: plum
  CFT_REGISTRY_NAME: hmctspublic
  CFT_REGISTRY_SUB: 8999dec3-0104-4a27-94ee-6588559729d1
  CFT_CLUSTER_NAME: cft-preview-01-aks
  CFT_CLUSTER_RESOURCE_GROUP: cft-preview-01-rg
  CFT_KUBE_NAMESPACE: cnp
  CFT_SERVICE_BUS: plum-servicebus-aat
  CFT_SB_RESOURCE_GROUP: plum-shared-infrastructure-aat
jobs:
  buildAndDeploySDS:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Go fmt
        run: go fmt
        env:
          GOOS: darwin
          GOARCH: amd64

      # Build recipe-receiver app
      - name: Build
        run: go build -v .
        env:
          GOOS: linux
          GOARCH: amd64

#      # Connect to Azure Container Registry (ACR)
#      - uses: azure/docker-login@v1
#        with:
#          login-server: ${{ env.SDS_REGISTRY_NAME }}.azurecr.io
#          username: ${{ secrets.SDS_REGISTRY_USERNAME }}
#          password: ${{ secrets.SDS_REGISTRY_PASSWORD }}

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az acr login -n ${{ env.SDS_REGISTRY_NAME }}

      # Container build and push to an Azure Container Registry (ACR)
      - name: Build and Push PR Container Image
        run: |
          ./scripts/docker.sh pr-${{ github.event.number }}
        shell: bash
        env:
          ACR_REPO: ${{ env.SDS_REGISTRY_NAME }}.azurecr.io/${{ env.SDS_PRODUCT }}/${{ env.APP_NAME }}
          REGISTRY_NAME: ${{ env.SDS_REGISTRY_NAME }}
          REGISTRY_SUB: ${{ env.SDS_REGISTRY_SUB }}

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v2
        with:
          cluster-name: ${{ env.SDS_CLUSTER_NAME }}
          resource-group: ${{ env.SDS_CLUSTER_RESOURCE_GROUP }}
          admin: true

      # Generate manifest using helm chart
      - name: Generate manifests
        uses: azure/k8s-bake@v2.2
        env:
          ACR_REPO: ${{ env.SDS_REGISTRY_NAME }}.azurecr.io/${{ env.SDS_PRODUCT }}/${{ env.APP_NAME }}
        with:
          renderEngine: "helm"
          helmChart: "./charts/recipe-receiver/"
          releaseName: recipe-receiver-pr${{ github.event.number }}
          helm-version: ${{ env.HELM_VERSION }}
          overrides: |
            function.image:${{ env.ACR_REPO }}:pr-${{ github.event.number }}
            function.environment.QUEUE:${{ env.QUEUE_NAME }}
            function.triggers[0].type:azure-servicebus
            function.triggers[0].namespace:${{ env.SDS_SERVICE_BUS }}
            function.triggers[0].queueName:${{ env.QUEUE_NAME }}
            function.triggers[0].queueLength:5
        id: bake

      # Create queue and fill it with messages
      - name: Create queue
        run: |
          ./scripts/create-queue.sh ${{ env.QUEUE_NAME }}
        shell: bash
        env:
          SB_RESOURCE_GROUP: ${{ env.SDS_SB_RESOURCE_GROUP }}
          SERVICE_BUS: ${{ env.SDS_SERVICE_BUS }}
          SUBSCRIPTION: ${{ env.SDS_SUBSCRIPTION }}

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          namespace: ${{ env.KUBE_NAMESPACE }}

      # Wait for message count to reach 0
      - name: Watch queue
        run: |
          ./scripts/watch-queue.sh ${{ env.QUEUE_NAME }}
        shell: bash
        env:
          SB_RESOURCE_GROUP: ${{ env.SDS_SB_RESOURCE_GROUP }}
          SERVICE_BUS: ${{ env.SDS_SERVICE_BUS }}
          SUBSCRIPTION: ${{ env.SDS_SUBSCRIPTION }}

      # Container build and push to an Azure Container Registry (ACR)
      - name: Promote PR Image to Prod
        env:
          ACR_REPO: ${{ env.SDS_REGISTRY_NAME }}.azurecr.io/${{ env.SDS_PRODUCT }}/${{ env.APP_NAME }}
        run: |
          ./scripts/docker.sh prod
        shell: bash
        if: ${{ success() }}

      - name: Az logout
        run: |
          az logout
        shell: bash
        if: ${{ always() }}

  buildAndDeployCFT:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Go fmt
        run: go fmt
        env:
          GOOS: darwin
          GOARCH: amd64

      # Build recipe-receiver app
      - name: Build
        run: go build -v .
        env:
          GOOS: linux
          GOARCH: amd64

#      # Connect to Azure Container Registry (ACR)
#      - uses: azure/docker-login@v1
#        with:
#          login-server: ${{ env.CFT_REGISTRY_NAME }}.azurecr.io
#          username: ${{ secrets.CFT_REGISTRY_USERNAME }}
#          password: ${{ secrets.CFT_REGISTRY_PASSWORD }}

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az acr login -n ${{ env.SDS_REGISTRY_NAME }}  --expose-token || | jq -r .accessToken | docker login ${{ env.SDS_REGISTRY_NAME }}.azurecr.io -u  00000000-0000-0000-0000-000000000000 --password-stdin

      # Container build and push to an Azure Container Registry (ACR)
      - name: Build and Push PR Container Image
        run: |
          ./scripts/docker.sh pr-${{ github.event.number }}
        shell: bash
        env:
          ACR_REGISTRY: ${{ env.CFT_REGISTRY_NAME }}.azurecr.io
          ACR_REPO: ${{ env.CFT_PRODUCT }}/${{ env.APP_NAME }}

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v2
        with:
          cluster-name: ${{ env.CFT_CLUSTER_NAME }}
          resource-group: ${{ env.CFT_CLUSTER_RESOURCE_GROUP }}
          admin: true

      # Generate manifest using helm chart
      - name: Generate manifests
        uses: azure/k8s-bake@v2.2
        env:
          ACR_REGISTRY: ${{ env.CFT_REGISTRY_NAME }}.azurecr.io
          ACR_REPO: ${{ env.CFT_PRODUCT }}/${{ env.APP_NAME }}
        with:
          renderEngine: "helm"
          helmChart: "./charts/recipe-receiver/"
          releaseName: recipe-receiver-pr${{ github.event.number }}
          helm-version: ${{ env.HELM_VERSION }}
          overrides: |
            function.image:${{ env.ACR_REGISTRY }}/${{ env.ACR_REPO }}:pr-${{ github.event.number }}
            function.environment.QUEUE:${{ env.QUEUE_NAME }}
            function.triggers[0].type:azure-servicebus
            function.triggers[0].namespace:${{ env.CFT_SERVICE_BUS }}
            function.triggers[0].queueName:${{ env.QUEUE_NAME }}
            function.triggers[0].queueLength:5
        id: bake

      # Create queue and fill it with messages
      - name: Create queue
        run: |
          ./scripts/create-queue.sh ${{ env.QUEUE_NAME }}
        shell: bash

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          namespace: ${{ env.CFT_KUBE_NAMESPACE }}

      # Wait for message count to reach 0
      - name: Watch queue
        run: |
          ./scripts/watch-queue.sh ${{ env.QUEUE_NAME }}
        shell: bash

      # Container build and push to an Azure Container Registry (ACR)
      - name: Promote PR Image to Prod
        env:
          ACR_REGISTRY: ${{ env.CFT_REGISTRY_NAME }}.azurecr.io
          ACR_REPO: ${{ env.CFT_PRODUCT }}/${{ env.APP_NAME }}
        run: |
          ./scripts/docker.sh prod
        shell: bash
        if: ${{ success() }}

      - name: Az logout
        run: |
          az logout
        shell: bash
        if: ${{ always() }}
