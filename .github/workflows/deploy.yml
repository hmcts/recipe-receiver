name: Deploy Keda test app

on: pull_request

env:
  # Common vars
  GITHUB_EVENT_NUMBER: ${{ github.event.number }}
  APP_NAME: recipe-receiver
  QUEUE_NAME: recipes-pr${{ github.event.number }}
  HELM_VERSION: v3.9.0
  VAR_FILE_PATH=${{ github.workspace }}/.github/workflows

jobs:
  buildAndPush:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Go fmt
        run: go fmt
        env:
          GOOS: darwin
          GOARCH: amd64

      # Build recipe-receiver app
      - name: Build
        run: go build -v .
        env:
          GOOS: linux
          GOARCH: amd64

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Load SDS vars
        run: |
          cat ${VAR_FILE} >> $GITHUB_ENV
        shell: bash
        env:
          VAR_FILE: ${{ env.VAR_FILE_PATH }}/sds.env

      - name: Get ACR Token
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az account set --subscription ${{ env.SDS_CLUSTER_SUB }}
            sds_token=$(az acr login -n ${{ env.SDS_REGISTRY_NAME }} --expose-token | jq -r .accessToken)
            echo "SDS_ACR_TOKEN=${sds_token}" >> $GITHUB_ENV

      # Connect to Azure Container Registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.SDS_REGISTRY_NAME }}.azurecr.io
          username: 00000000-0000-0000-0000-000000000000
          password: ${{ env.SDS_ACR_TOKEN }}

      # Container build and push to an Azure Container Registry (ACR)
      - name: Build and Push PR Container Image - SDS
        run: |
          ./scripts/docker.sh pr-${{ env.GITHUB_EVENT_NUMBER }}
        shell: bash
        env:
          ACR_REPO: ${{ env.SDS_REGISTRY_NAME }}.azurecr.io/${{ env.SDS_PRODUCT }}/${{ env.APP_NAME }}
          REGISTRY_NAME: ${{ env.SDS_REGISTRY_NAME }}
          REGISTRY_SUB: ${{ env.SDS_REGISTRY_SUB }}

      - name: Load CFT vars
        run: |
          cat ${VAR_FILE} >> $GITHUB_ENV
        shell: bash
        env:
          VAR_FILE: ${{ env.VAR_FILE_PATH }}/cft.env

      - name: Get ACR Token CFT
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az account set --subscription ${{ env.CFT_CLUSTER_SUB }}
            cft_token=$(az acr login -n ${{ env.CFT_REGISTRY_NAME }} --expose-token | jq -r .accessToken)
            echo "CFT_ACR_TOKEN=${cft_token}" >> $GITHUB_ENV

      # Connect to Azure Container Registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CFT_REGISTRY_NAME }}.azurecr.io
          username: 00000000-0000-0000-0000-000000000000
          password: ${{ env.CFT_ACR_TOKEN }}

      # Container build and push to an Azure Container Registry (ACR)
      - name: Build and Push PR Container Image - CFT
        run: |
          ./scripts/docker.sh pr-${{ env.GITHUB_EVENT_NUMBER }}
        shell: bash
        env:
          ACR_REPO: ${{ env.CFT_REGISTRY_NAME }}.azurecr.io/${{ env.CFT_PRODUCT }}/${{ env.APP_NAME }}
          REGISTRY_NAME: ${{ env.CFT_REGISTRY_NAME }}
          REGISTRY_SUB: ${{ env.CFT_REGISTRY_SUB }}

  deploy:
    strategy:
      matrix:
        project: ["sds", "cft"]
    runs-on: ubuntu-latest
    needs: buildAndPush
    steps:
      - uses: actions/checkout@main

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Load ${{ matrix.project }} vars
        run: |
          cat ${VAR_FILE} >> $GITHUB_ENV
        shell: bash
        env:
          VAR_FILE: ${{ github.workspace }}/.github/workflows/${{ matrix.project }}.env

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Create queue and fill it with messages
      - name: Create queue
        run: |
          ./scripts/create-queue.sh ${{ env.QUEUE_NAME }}
        shell: bash
        env:
          SB_RESOURCE_GROUP: ${{ env.SB_RESOURCE_GROUP }}
          SERVICE_BUS: ${{ env.SERVICE_BUS }}
          SUBSCRIPTION: ${{ env.SUBSCRIPTION }}

      # Deploy to AKS
      - name: Deploy to AKS
        run: |
          ./scripts/k8s.sh deploy
        shell: bash
        env:
          ACR_REPO: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.PRODUCT }}/${{ env.APP_NAME }}
          SB_RESOURCE_GROUP: ${{ env.SB_RESOURCE_GROUP }}
          SERVICE_BUS: ${{ env.SERVICE_BUS }}
          SUBSCRIPTION: ${{ env.SUBSCRIPTION }}
          KUBE_NAMESPACE: ${{ env.KUBE_NAMESPACE }}
          CLUSTER_SUB: ${{ env.CLUSTER_SUB }}
          CLUSTER_RESOURCE_GROUP: ${{ env.CLUSTER_RESOURCE_GROUP }}
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}

      # Wait for message count to reach 0
      - name: Watch queue
        run: |
          ./scripts/watch-queue.sh ${{ env.QUEUE_NAME }}
        shell: bash
        env:
          SB_RESOURCE_GROUP: ${{ env.SB_RESOURCE_GROUP }}
          SERVICE_BUS: ${{ env.SERVICE_BUS }}
          SUBSCRIPTION: ${{ env.SUBSCRIPTION }}

      # Container build and push to an Azure Container Registry (ACR)
      - name: Promote PR Image to Prod
        env:
          ACR_REPO: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.PRODUCT }}/${{ env.APP_NAME }}
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}
          REGISTRY_SUB: ${{ env.REGISTRY_SUB }}
        run: |
          ./scripts/docker.sh prod
        shell: bash
        if: ${{ success() }}

      - name: Az logout
        run: |
          az logout
        shell: bash
        if: ${{ always() }}

#  deployToCFT:
#    runs-on: ubuntu-latest
#    needs: buildAndPush
#    steps:
#      - uses: actions/checkout@main
#
#      - name: Set up Go
#        uses: actions/setup-go@v3
#        with:
#          go-version: 1.18
#
#      - uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#
#      # Create queue and fill it with messages
#      - name: Create queue
#        run: |
#          ./scripts/create-queue.sh ${{ env.QUEUE_NAME }}
#        shell: bash
#        env:
#          SB_RESOURCE_GROUP: ${{ env.CFT_SB_RESOURCE_GROUP }}
#          SERVICE_BUS: ${{ env.CFT_SERVICE_BUS }}
#          SUBSCRIPTION: ${{ env.CFT_SUBSCRIPTION }}
#
#      # Deploy to AKS
#      - name: Deploy to AKS
#        run: |
#          ./scripts/k8s.sh deploy
#        shell: bash
#        env:
#          ACR_REPO: ${{ env.CFT_REGISTRY_NAME }}.azurecr.io/${{ env.CFT_PRODUCT }}/${{ env.APP_NAME }}
#          SB_RESOURCE_GROUP: ${{ env.CFT_SB_RESOURCE_GROUP }}
#          SERVICE_BUS: ${{ env.CFT_SERVICE_BUS }}
#          SUBSCRIPTION: ${{ env.CFT_SUBSCRIPTION }}
#          KUBE_NAMESPACE: ${{ env.CFT_KUBE_NAMESPACE }}
#          CLUSTER_SUB: ${{ env.CFT_CLUSTER_SUB }}
#          CLUSTER_RESOURCE_GROUP: ${{ env.CFT_CLUSTER_RESOURCE_GROUP }}
#          CLUSTER_NAME: ${{ env.CFT_CLUSTER_NAME }}
#
#      # Wait for message count to reach 0
#      - name: Watch queue
#        run: |
#          ./scripts/watch-queue.sh ${{ env.QUEUE_NAME }}
#        shell: bash
#        env:
#          SB_RESOURCE_GROUP: ${{ env.CFT_SB_RESOURCE_GROUP }}
#          SERVICE_BUS: ${{ env.CFT_SERVICE_BUS }}
#          SUBSCRIPTION: ${{ env.CFT_SUBSCRIPTION }}
#
#      # Container build and push to an Azure Container Registry (ACR)
#      - name: Promote PR Image to Prod
#        env:
#          ACR_REPO: ${{ env.CFT_REGISTRY_NAME }}.azurecr.io/${{ env.CFT_PRODUCT }}/${{ env.APP_NAME }}
#          REGISTRY_NAME: ${{ env.CFT_REGISTRY_NAME }}
#          REGISTRY_SUB: ${{ env.CFT_REGISTRY_SUB }}
#        run: |
#          ./scripts/docker.sh prod
#        shell: bash
#        if: ${{ success() }}
#
#      - name: Az logout
#        run: |
#          az logout
#        shell: bash
#        if: ${{ always() }}
